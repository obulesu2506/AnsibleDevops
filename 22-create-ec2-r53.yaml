- name: Creating AWS Services using Ansible
  hosts: local
  connection: local
  vars:
    subnet_ID:
    sg_ID: 
    ami_ID: 
    instance_type: t3.micro
    zone: kumardevops.store
    instances:
    - mysql
    - backend
    - frontend

  tasks:
    - name: Install Python libraries for connecting AWS
      ansible.builtin.pip:
        name: "{{ item }}"
        executable: pip3.9
      loop:
      - boto3
      - botocore

    - name: Create 3 servers for mysql,backend, frontend config
      amazon.aws.ec2_instance:
        name: "{{ item }}"
        subnet_id: "{{ subnet_ID }}"
        security_group: "{{ sg_ID }}"
        image_id: "{{ ami_ID }}"
        instance_type: "{{ instance_type }}"
      loop: "{{ instances }}"
      register: ec2_info

    - name: print the ec2_info output
      ansible.builtin.debug:
        msg: "{{ ec2_info }}"

    - name: print private ip address
      ansible.builtin.debug:
        msg: "{{ item.instances[0].private_ip_address }}"
      loop: "{{ ec2_info.results }}"

    - name: create privae ip R53 records
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ item.item }}.{{ zone }}"
        type: A # record type
        ttl: 1  # time to leave field seconds
        value: "{{ item.instances[0].private_ip_address }}"
        wait: true
        overwrite: true  #if there is record present already with all these latest attributes
      loop: "{{ ec2_info.results }}"

    - name: create public ip R53 record
      amazon.aws.route53:
        state: present
        zone: "{{ zone }}"
        record: "{{ zone }}"
        type: A
        ttl: 1
        value: "{{ item.instances[0].public_ip_address }}"
        wait: true
        overwrite: true
      loop: "{{ ec2_info.results }}"
      when: item.item == "frontend"
